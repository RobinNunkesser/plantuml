@startuml
top to bottom direction

package "Microsoft Msagl Core GraphAlgorithms" {
    class MinimumSpanningTreeByPrim {
        IList<IEdge> GetTreeEdges()
    }
}

package "Apps" {
    class ShortestPathsViewModel
}

package "Exam Generator" {
    class SpanningTreeTask
}

package "Domain" {
    class MinimumSpanningTreeSolver
}
package "Ports" {
interface IMinimumSpanningTreeSolver
interface ISolver<TParameters, TSolution> {
    TSolution Solve(TParameters parameters)
}
interface IMinimumSpanningTreeSolution {
    IEnumerable<ITaggedEdge<string, double>> Edges
}
interface IMinimumSpanningTreeParameters {
    IUndirectedGraph<string, ITaggedEdge<string, double>> Graph
}
interface ITaggedEdge<TVertex, TTag> {
    TVertex Source
    TVertex Target
    TTag Tag
}

interface IUndirectedGraph<TEdge> {
    IEnumerable<TEdge> Edges    
    string ToGraphviz()
}
}

'interface ISolver<IMinimumSpanningTreeParameters, IMinimumSpanningTreeSolution> 
MinimumSpanningTreeSolver ..|> IMinimumSpanningTreeSolver
IMinimumSpanningTreeSolver ..|> ISolver
IMinimumSpanningTreeSolver -- IMinimumSpanningTreeSolution
IMinimumSpanningTreeSolver -- IMinimumSpanningTreeParameters
IMinimumSpanningTreeParameters -- IUndirectedGraph
IMinimumSpanningTreeSolution -- ITaggedEdge
SpanningTreeTask o.. MinimumSpanningTreeSolver: DI
ShortestPathsViewModel o.. MinimumSpanningTreeSolver: DI
SpanningTreeTask o-- IMinimumSpanningTreeSolver
ShortestPathsViewModel o-- IMinimumSpanningTreeSolver
MinimumSpanningTreeSolver o-- MinimumSpanningTreeByPrim
'ISolver .[hidden].> MinimumSpanningTreeSolver
IMinimumSpanningTreeSolution .[hidden].> ISolver
IMinimumSpanningTreeParameters .[hidden].> ISolver
ITaggedEdge .[hidden].> MinimumSpanningTreeByPrim

' package "User Interface (Console)" <<Rectangle>> {
'     class "Program" as View
' }



' package "Core Ports (driving)" <<Rectangle>> {

'     interface ITask
'     {
'         ITaskTextGenerator TextGenerator 
'         ITaskSolver Solver
'         int Score
'         string Topic 
'         ITaskText Text 
'     }

'     interface ITaskText
'     {
'         string Solution 
'         string Problem 
'         string Form 
'     }

'     interface IExam
'     {
'         Boolean Mock 
'         string Lecture 
'         string Student 
'         List<ITask> Tasks 
'         string FileName 
'     }

'     interface "IExamGenerator" as CoreService {
'         IStudentRepository studentRepository
'         IExamExporter ExamExporter 
'         {method} Execute(ExamType type, (Boolean -> void) successHandler,
'             (Exception -> void) errorHandler)
'     }

'     enum ExamType {
'         ExamFoo
'         ExamBar
'     }

' }

' package "Core Ports (driven)" <<Rectangle>> {        

'     interface "IStudentRepository" as InfrastructureInterface
'     {
'         List<String> Retrieve()
'     }

'     interface IExamExporter
'     {
'         void Export(IExam exams);
'     }

'     interface ITaskTextGenerator 
'     {
'         ITaskText Generate(ITask task);
'     }

'     interface ITaskSolver<T>
'     {
'         T Solve(ITask task)
'     }

' }


' View -> CoreService
' IExam -> ITask
' CoreService -> IExam
' ITask -> ITaskText
' CoreService -> InfrastructureInterface
' CoreService -> IExamExporter
' CoreService -> ExamType
' ITask -> ITaskSolver
' ITask -> ITaskTextGenerator
' View .[hidden].> ITask 
' ITask .[hidden].> IExamExporter
@enduml

